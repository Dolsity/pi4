#!/bin/bash
# /usr/local/bin/pi4

####
#### Usage:
####   pi4 <OPTION> <input>
####
#### Options:
####   start                      Start pi4 service
####
####   stop                       Stop pi4 service
####
####   restart                    Restart pi4 service
####
####   -h, --help                 Show help
####
####   -c, --check                Display all configurations
####
####   -a, --auto                 [on/off] Enable or disable auto-start at boot
####
####   -u, --unit                 [C/F] Set the unit of temperature (Celsius/Fahrenheit)
####
####   -f, --fan                  [temp] Set fan activation temperature (Â°C, default 35, range 30-80)
####
####   -al, --always_on           [on/true/off/false] Whether the screen is always on (default: false)
####
####   -s, --staty_time           [time] Screen display duration (default: 30 seconds)
####
####   -re | --rgb_enable)        [on/true/off/false] Enable/disable RGB strip
####
####   -rb, --led_brightness      [brightness] RGB strip brightness (default: 10, range 0-100)
####
####   -rs, --rgb_style           [style] RGB display style (default: breath)
####                              style: breath, leap, flow, raise_up, colorful
####
####   -rc, --rgb_color           [(HEX)color] Set RGB color (default: 0a1aff)
####
####   -rbs, --rgb_speed          [speed] RGB blink speed (default: 50, range 0-100)
####
####   -pwm, --rgb_pwm            [frequency] RGB signal frequency (default 1000 kHz, 400 ~ 1600)
####
####   -rp, --rgb_pin             [pin] RGB signal pin, could be [10/spi/SPI/12/pwm/PWM] or
####                              [21/pcm/PCM], default: 10
####
####   -F, --foreground           Run in foreground
####
#!/bin/bash

CONF=/opt/pi4/config.txt
main='/opt/pi4/main.py'
# echo $main
# echo 'config file:'$CONF

# print colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
GRAY='\033[1;30m'
NC='\033[0m'

# check boot configuration path
DEFAULT_BOOT_CONFIG="/boot/firmware/config.txt"
BACKUP_BOOT_CONFIG="/boot/config.txt"
boot_config=""

run_in_background=true

# check if the script is run as root
if [ $(id -u) -ne 0 ]; then
    echo -e "Script must be run as root. Try 'sudo pi4 $@'\n"
    exit 1
fi

# check if the boot configuration file exists
if [ -f "$DEFAULT_BOOT_CONFIG" ]; then
    boot_config=${DEFAULT_BOOT_CONFIG}
elif [ -f $BACKUP_BOOT_CONFIG ]; then
    boot_config=${BACKUP_BOOT_CONFIG}
else
    boot_config=""
    echo -e "${RED}Warning: Cannot find boot configuration file${NC}"
fi


help() {
    echo -e "\nconfig file:${CONF}"
    sed -rn 's/^#### //; s/^####$//; T; p;' "$0"
}

start() {
    if [ $run_in_background == true ]; then
        echo "run in background"
        python3 $main 1>/dev/null 2>>/opt/pi4/log &
    else
        echo "run in foreground"
        python3 $main
    fi
    # sudo python3 $main 1>/dev/null 2>&1 &
    if [ $? == '0' ];then
        echo "pi4 start succeed"
    else
        echo "pi4 start failed"
        echo $?
    fi
}

stop() {
    echo "stopping pi4"
    # kill $(ps aux | grep $main | awk '{ print $2 }') >/dev/null 2>&1
    pid=$(ps aux | grep $main | awk '{print $2}')
    echo "pid="$pid
    kill -15 $pid >/dev/null 2>&1 # send SIGTERM signal
    python3 $main close_rgb 1>/dev/null 2>>/opt/pi4/log & # close rgb
    sleep 0.1 # exit handler
}

restart() {
    echo "restarting pi4"
    stop
    start
}

want_reboot() {
    read -e -p "$(echo -e ${GREEN}Do you want to reboot to make the changes take effect? \(Y/N\): ${NC})" choice
    if [ "$choice" == "Y" ] || [ "$choice" == "y" ]; then
        echo "Rebooting now ..."
        reboot
    fi
}

change_config() {
    # $1: check string
    # $2: replace string
    # $3: config file path
    if grep -q -e "$1" "$3"; then
        sed -i -e "s:$1:$2:g" "$3"
    else
        sed -i -e "$ a[all]\n$2" "$3"
    fi
}


if [ $# -eq 0 ]; then
    help
    exit 0
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        start)
        shift
        ;;
        stop)
        stop
        exit 0
        ;;
        restart)
        restart
        exit 0
        ;;
        -h|--help)
        help
        exit 0
        ;;
        -c|--check)
        echo -e "config file:${CONF}\n"
        grep -E '=.' "${CONF}"
        exit 0
        ;;
        -a|--auto)
        case "$2" in
            "on"|true)
                echo "enable auto-start at boot"
                systemctl enable pi4.service
                shift 2
            ;;
            "off"|false)
                echo "disable auto-start at boot"
                systemctl disable pi4.service
                shift 2
            ;;
            *)
            echo "usage: pi4 -a|--auto [on/off]"
            exit 1
            ;;
        esac
        ;;
        -u|--unit)
        if [ $# -lt 2 ] ;then
            echo "usage: pi4 -c|--check [C/F]"
            exit 1
        else
            if [ $2 == 'C' ] || [ $2 == 'F' ];then
                sed -i "s/^unit=.*/unit=$2/" $CONF
                sed -i -e "s:temp_unit.*=.*:temp_unit = $2:g" ${CONF}
                echo "set temperature unit to "$2
                shift 2
            else
                echo "unit must be C or F"
                exit 1
            fi
        fi
        ;;
        -f|--fan)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -f|--fan [temp]"
            exit 1
        else
            if [[ $2 =~ ^[[:digit:]]+$ ]]; then
                echo "set the fan on temperature to $2 "
                sed -i -e "s:fan_temp.*=.*:fan_temp = $2:g" ${CONF}
                shift 2
            else
                echo "parameter must be integer"
                exit 1
            fi
        fi
        ;;
        -al|--always_on)
        case "$2" in
            "on"|true)
                echo "set screen_always_on to on "
                sed -i -e "s:screen_always_on.*=.*:screen_always_on = True:g" ${CONF}
                shift 2
            ;;
            "off"|false)
                echo "set screen_always_on to off "
                sed -i -e "s:screen_always_on.*=.*:screen_always_on = False:g" ${CONF}
                shift 2
            ;;
            *)
            echo "usage: pi4 -al|--always_on [on|off]"
            exit 1
        esac
        ;;
        -s|--staty_time)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -s|--staty_time [time], in seconds"
            exit 1
        else
            if [[ $2 =~ ^[[:digit:]]+$ ]]; then
                echo "set screen_off_time to $2 "
                sed -i -e "s:screen_off_time.*=.*:screen_off_time = $2:g" ${CONF}
                shift 2
            else
                echo "parameter must be integer"
                exit 1
            fi
        fi
        ;;
        -re|--rgb_enable)
        case "$2" in
            "on"|true)
                echo "set rgb_enable to on "
                sed -i -e "s:rgb_enable.*=.*:rgb_enable = True:g" ${CONF}
                shift 2
            ;;
            "off"|false)
                echo "set rgb_enable to off "
                sed -i -e "s:rgb_enable.*=.*:rgb_enable = False:g" ${CONF}
                shift 2
            ;;
            *)
            echo "usage: pi4 -re|--rgb_enable [on|true|off|false]"
            exit 1
            ;;
        esac
        ;;
        -rb|--led_brightness)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -rb|--led_brightness [brightness],brightness in range (0 ~ 100)"
            exit 1
        fi
        if [[ $2 =~ ^[[:digit:]]+$ ]]; then
            # Check if argument is within range
            if [ $2 -ge 0 ] && [ $2 -le 100 ]; then
                echo "set led_brightness to $2%"
                sed -i -e "s:led_brightness.*=.*:led_brightness = $2:g" ${CONF}
                shift 2
            else
                echo "out of range (0 ~ 100) "
                exit 1
            fi
        else
            echo "parameter must be integer"
            exit 1
        fi
        ;;
        -rs|--rgb_style)
        case "$2" in
            breath|static|leap|flow|raise_up|colorful|colorful_static|colorful_leap)
            echo "set rgb_style to $2 "
            sed -i -e "s:rgb_style.*=.*:rgb_style = $2:g" ${CONF}
            shift 2
            ;;
            *)
            echo "usage: pi4 -rs|--rgb_style [breath / static / leap / flow / raise_up / colorful / colorful_static / colorful_leap]"
            exit 1
            ;;
        esac
        ;;
        -rc|--rgb_color)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -rc|--rgb_color [color],clolor in HEX. eg: 0a1aff"
            exit 1
        else
            echo "set rgb_color to $2 "
            sed -i -e "s:rgb_color.*=.*:rgb_color = $2:g" ${CONF}
            shift 2
        fi
        ;;
        -rbs|--rgb_speed)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -rbs|--rgb_speed [speed],speed in range (0 ~ 100)"
            exit 1
        else
            if [[ $2 =~ ^[[:digit:]]+$ ]]; then
                if [ $2 -ge 0 ] && [ $2 -le 100 ]; then
                    echo "set rgb_blink_speed to $2 "
                    sed -i -e "s:rgb_blink_speed.*=.*:rgb_blink_speed = $2:g" ${CONF}
                    shift 2
                else
                    echo "out of range (0 ~ 100) "
                    exit 1
                fi
            else
                echo "parameter must be integer"
                exit 1
            fi
        fi
        ;;
        -pwm|--rgb_pwm)
        if [ $# -lt 2 ]; then
            echo "usage: pi4 -pwm|--rgb_pwm [frequency],frequency in range (400 ~ 1600) kHz"
            exit 1
        else
            if [[ $2 =~ ^[[:digit:]]+$ ]]; then
                if [ $2 -ge 400 ] && [ $2 -le 1600 ]; then
                    echo "set rgb_pwm_freq to $2 "
                    sed -i -e "s:rgb_pwm_freq.*=.*:rgb_pwm_freq = $2:g" ${CONF}
                    shift 2
                else
                    echo "out of range (400 ~ 1600) kHz "
                    exit 1
                fi
            else
                echo "parameter must be integer"
                exit 1
            fi
        fi
        ;;
        -rp|--rgb_pin)
        case "$2" in
            spi|SPI|10)
            echo "set rgb io to pin 10 (spi)"
            # set pin
            change_config ".*rgb_pin\s*=.*"  "rgb_pin = 10" ${CONF}
            #
            if [[ $boot_config != "" ]]; then
                echo "boot_config: ${boot_config}"
                ## enable audio
                change_config ".*dtparam=audio=.*" "dtparam=audio=on" ${boot_config}
                # enable spi
                change_config ".*dtparam=spi=.*"  "dtparam=spi=on" ${boot_config}
                # change core_freq, core_freq_min to stabilize the spi output frequency
                change_config ".*core_freq=.*"  "core_freq=500" ${boot_config}
                change_config ".*core_freq_min=.*"  "core_freq_min=500" ${boot_config}
                # whether reboot to make changes take effect
                want_reboot
                # restart program
            fi
            shift 2
            ;;
            pwm|PWM|12)
            echo "set rgb io to pin 12 (pwm)"
            # set io
            change_config ".*rgb_pin\s*=.*"  "rgb_pin = 12" ${CONF}
            #
            if [[ $boot_config != "" ]]; then
                echo "boot_config: ${boot_config}"
                # disable audio
                change_config ".*dtparam=audio=.*" "dtparam=audio=off" ${boot_config}
                # whether reboot to make changes take effect
                want_reboot
            fi
            # restart program
            shift 2
            ;;
            pcm|PCM|21)
            echo "set rgb io to pin 21 (pcm)"
            # set io
            change_config ".*rgb_pin\s*=.*"  "rgb_pin = 21" ${CONF}
            #
            if [[ $boot_config != "" ]]; then
                echo "boot_config: ${boot_config}"
                ## enable audio
                change_config ".*dtparam=audio=.*" "dtparam=audio=on" ${boot_config}
                # disable i2s
                change_config ".*dtoverlay=hifiberry-dac$" "#dtoverlay=hifiberry-dac" ${boot_config}
                change_config ".*dtoverlay=i2s-mmap$" "#dtoverlay=i2s-mmap" ${boot_config}
                # whether reboot to make changes take effect
                want_reboot
            fi
            # restart program
            shift 2
            ;;
            *)
            echo "usage: pi4 -rp|--rgb_pin [10 / spi / 12 / pwm / 21 / pcm]"
            exit 1
            ;;
        esac
        ;;
        -F|--foreground)
        run_in_background="false"
        shift
        ;;
        *)
        echo -e "${RED}Invalid argument: $1.${NC}"
        exit 1
        ;;
    esac
done

restart